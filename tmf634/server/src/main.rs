//! Main binary entry point for tmf634_server implementation.

#![allow(missing_docs)]

use clap::{App, Arg};

mod server;

/// Create custom server, wire it to the autogenerated router,
/// and pass it to the web server.
#[tokio::main]
async fn main() {
    env_logger::init();

    let matches = App::new("server")
        .arg(Arg::with_name("https")
            .long("https")
            .help("Whether to use HTTPS or not"))
        .arg(Arg::with_name("redis")
            .long("redis")
            .value_name("URI")
            .takes_value(true)
            .help("Redis server URI"))
        .arg(Arg::with_name("port")
            .long("port")
            .value_name("port")
            .takes_value(true)
            .help("Port number to listen on"))
        .arg(Arg::with_name("interface")
            .long("interface")
            .value_name("address")
            .takes_value(true)
            .help("Address of local interface to bind"))
        .get_matches();

    let bind = matches.value_of("address").unwrap_or("0.0.0.0");
    let port = matches.value_of("port").unwrap_or("8080");
    let redis = matches.value_of("redis").unwrap_or("redis://127.0.0.1/");
    let https = matches.is_present("https");

    server::create(redis, bind, port, https).await;
}
